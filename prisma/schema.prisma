// Datasource & generator
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth core tables
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts         Account[]
  sessions         Session[]
  projects         Project[] @relation("UserProjects")
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  payments         Payment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Domain models
model Project {
  id                   String        @id @default(cuid())
  ownerUserId          String
  name                 String
  slug                 String        @unique
  description          String
  status               ProjectStatus
  visibility           Visibility
  category             String
  demoUrl              String?
  repoUrl              String?
  featured             Boolean       @default(false)
  spotlight            Boolean       @default(false)
  spotlightPurchasedAt DateTime?
  viewsCount           Int           @default(0)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  archivedAt           DateTime?

  // Relations
  owner              User                @relation("UserProjects", fields: [ownerUserId], references: [id], onDelete: Cascade)
  technologies       ProjectTechnology[]
  collaborationNeeds CollaborationNeed[]
  messages           Message[]
  payments           Payment[] // backrelation to Payment.project
}

model Technology {
  id        String   @id @default(cuid())
  name      String   @unique
  category  String?
  createdAt DateTime @default(now())

  projects ProjectTechnology[]
}

model ProjectTechnology {
  projectId    String
  technologyId String

  project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  technology Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)

  @@id([projectId, technologyId])
}

model CollaborationNeed {
  id           String       @id @default(cuid())
  projectId    String
  role         String
  profile      String
  compensation Compensation
  description  String?
  isOpen       Boolean      @default(true)
  createdAt    DateTime     @default(now())
  closedAt     DateTime?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Message {
  id              String    @id @default(cuid())
  projectId       String
  senderUserId    String
  recipientUserId String
  body            String
  createdAt       DateTime  @default(now())
  readAt          DateTime?

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sender    User    @relation("SentMessages", fields: [senderUserId], references: [id], onDelete: Cascade)
  recipient User    @relation("ReceivedMessages", fields: [recipientUserId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([senderUserId])
  @@index([recipientUserId])
}

model Payment {
  id          String        @id @default(cuid())
  userId      String
  projectId   String?
  type        PaymentType
  amountCents Int
  currency    String        @default("USD")
  provider    String? // e.g. 'stripe'
  providerRef String? // e.g. Stripe payment intent id
  status      PaymentStatus @default(PENDING)
  meta        Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id])

  @@index([userId])
  @@index([projectId])
  @@index([type])
}

// Enums
enum ProjectStatus {
  draft
  seeking_collaboration
  open_to_collaboration
  showcase_only
  for_sale
  completed
}

enum Visibility {
  public
  unlisted
  private
}

enum Compensation {
  paid
  equity
  revenue_share
  volunteer
  negotiable
}

enum PaymentType {
  EXTRA_PROJECT
  SPOTLIGHT
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
}
